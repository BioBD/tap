wordsBySGBD=/*TAP*/;tb_;split;dbo.split;numeric;varchar;declare;drop table;create materialized view;create table;vacuum;analyze;pg_type;pg_namespace;tb_candidate_view;db.dattablespace;tb_workload;pg_catalog;pg_attribute;pg_roles;qp.query_plan;news;captured;pg_stat_activity;create procedure;explain;statman;schema_name;collation_name;plan_table;tb_workload;copy;alter;pg_opclass;limpa_estatisticas;clearMaterializedView;clearAllIndex;agent.;clearIndexNotPrimary;pg_trigger;client_encoding;pg_trigger;agent.;extra_float_digits;pg_get_userbyid;pg_proc;create index;btree;dbms_transaction; dual;v_$sql;sys.all_tab_cols;ora_rowscn;oracle;syn;table_owner;o.object_name;dba_ind_statistics;sys.;dba_tab_columns;

#scriptInitialization=
#scriptInitialization=delete from agent.tb_candidate_partial_index; delete from agent.tb_candidate_mv; delete from agent.tb_candidate_index_column; delete from agent.tb_candidate_index; delete from agent.tb_candidate_global_tuning; delete from agent.tb_workload_tna; delete from agent.tb_agent_tna; delete from agent.tb_tuning_action
scriptInitializationpostgresql=delete from agent.tb_candidate_partial_index; delete from agent.tb_candidate_mv; delete from agent.tb_candidate_index_column; delete from agent.tb_candidate_index; delete from agent.tb_candidate_global_tuning; delete from agent.tb_workload_tna; delete from agent.tb_agent_tna; delete from agent.tb_tuning_action;delete from agent.tb_operation_data;delete from agent.tb_operation;delete from agent.tb_execution;delete from agent.tb_workload
scriptInitializationsqlserver=delete from tb_candidate_partial_index; delete from tb_candidate_mv; delete from tb_candidate_index_column; delete from tb_candidate_index; delete from tb_candidate_global_tuning; delete from tb_workload_tna; delete from tb_agent_tna; delete from tb_tuning_action;delete from tb_operation_data;delete from tb_operation;delete from tb_execution;delete from tb_workload
scriptInitializationoracle=delete from tb_candidate_partial_index; delete from tb_candidate_mv; delete from tb_candidate_index_column; delete from tb_candidate_index; delete from tb_candidate_global_tuning; delete from tb_workload_tna; delete from tb_agent_tna; delete from tb_tuning_action;delete from tb_operation_data;delete from tb_operation;delete from tb_execution;delete from tb_workload;

#********** CaptureWorkloadBehaviour **********#
captureCurrentQueries_oracle=/*TAP*/ SELECT s.sql_id pid, s.sql_fulltext sql, case WHEN SQL_EXEC_START is null THEN TO_TIMESTAMP(s.last_load_time, 'YYYY-MM-DD HH24.MI.SS') ELSE TO_TIMESTAMP(TO_CHAR(SQL_EXEC_START, 'YYYY-MM-DD HH24.MI.SS'), 'YYYY-MM-DD HH24.MI.SS')  END start_time, u.username database_name FROM SYS.V_$SQL S, SYS.ALL_USERS U, V$SESSION SN WHERE S.PARSING_USER_ID = U.USER_ID AND SN.sql_hash_value = S.hash_value AND SN.sql_address = S.address and u.username like ? ORDER BY S.LAST_LOAD_TIME
captureCurrentQueries_sqlserver=/*TAP*/ SELECT session_id as pid, text as sql, start_time as start_time FROM sys.dm_exec_requests req CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS sqltext WHERE DB_NAME(database_id) like ?
captureCurrentQueries_postgresql=/*TAP*/ select pid, query as sql, query_start as start_time, datname as database_name from pg_stat_activity where datname like ?

capturePlanQuery_sqlserver=/*TAP*/ SELECT query_plan, UseCounts, Cacheobjtype, size_in_bytes, Objtype TEXT FROM sys.dm_exec_cached_plans CROSS APPLY sys.dm_exec_sql_text(plan_handle) CROSS APPLY sys.dm_exec_query_plan(plan_handle) WHERE TEXT LIKE '$query$'
capturePlanQuery_postgresql=/*TAP*/ EXPLAIN (FORMAT JSON) $query$
captureEstimatedPlanQuery_sqlserver=/*TAP*/ SET SHOWPLAN_XML ON;  GO | $query$ GO | SET SHOWPLAN_XML OFF;

#********** ReadSchemaBehaviour **********#
tableNames_postgresql=/*TAP*/ SELECT  nspname as schema, relname as tablename, reltuples as numberrows, relpages as numberpages FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE  nspname NOT IN ('pg_catalog', 'information_schema') AND relkind='r' and nspname <> 'agent'  ORDER BY reltuples DESC;
tableNames_oracle=/*TAP*/ select * from h_schema_table
tableNames_sqlserver=/*TAP*/ SELECT sc.name as SchemaName, t.NAME AS TableName, p.[Rows], sum(a.total_pages) as TotalPages FROM sys.tables t INNER JOIN sys.indexes i ON t.OBJECT_ID = i.object_id INNER JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id INNER JOIN sys.schemas sc ON t.schema_id = sc.schema_id WHERE t.NAME NOT LIKE 'dt%' AND t.NAME NOT LIKE 'tb_%' AND i.OBJECT_ID > 255 AND i.index_id <= 1 GROUP BY sc.name, t.NAME, i.object_id, i.index_id, i.name, p.[Rows]

detailsColumns_postgresql=/*TAP*/ SELECT f.attnum AS number, f.attname AS name, f.attnotnull AS notnull, pg_catalog.format_type(f.atttypid,f.atttypmod) AS type, CASE WHEN f.atthasdef = 't' THEN d.adsrc END AS default, coalesce(p.contype = 'p', false) AS primarykey, coalesce(p.contype = 'u', false) AS uniquekey, coalesce(p.contype = 'f', false) AS foreignkey, CASE WHEN p.contype = 'f' THEN fk.attnum END AS foreignkey_fieldnum, CASE WHEN p.contype = 'f' THEN fk.attname END AS foreignkey_name, CASE WHEN p.contype = 'f' THEN g.relname END AS foreignkey_table, CASE WHEN p.contype = 'f' THEN pg_catalog.format_type(f.atttypid,f.atttypmod) END AS foreignkey_type, (select n_distinct from pg_stats where tablename = '$table$' and attname = f.attname and schemaname = '$schema$') as column_selectivity FROM pg_attribute f JOIN pg_class c ON c.oid = f.attrelid JOIN pg_type t ON t.oid = f.atttypid LEFT JOIN pg_attrdef d ON d.adrelid = c.oid AND d.adnum = f.attnum LEFT JOIN pg_namespace n ON n.oid = c.relnamespace LEFT JOIN pg_constraint p ON p.conrelid = c.oid AND f.attnum = ANY (p.conkey) LEFT JOIN pg_class AS g ON p.confrelid = g.oid LEFT JOIN pg_attribute as fk ON g.oid = fk.attrelid AND fk.attnum = ANY (p.confkey) WHERE c.relkind = 'r' AND f.attrelid = '$schema$.$table$'::regclass AND f.attnum > 0 ORDER BY number ;
#detailsColumns_oracle=/*TAP*/ SELECT h_schema_columns.ordernum, h_schema_columns.columnname, h_schema_columns.isnull, h_schema_columns.typefield,  null domainrestriction, h_schema_columns.primarykey, h_schema_columns.uniquekey, h_schema_columns.foreignkey from h_schema_columns  WHERE tablename = '$table$'
detailsColumns_oracle=/*TAP*/ SELECT  null domainrestriction, h_schema_columns.* from h_schema_columns  WHERE upper(tablename) like upper('$table$')
detailsColumns_sqlserver=/*TAP*/ select COL.ORDINAL_POSITION, COL.COLUMN_NAME,	COL.IS_NULLABLE, COL.DATA_TYPE,	'' as DOMAIN_RESTRICTION, CASE WHEN CCU.COLUMN_NAME IS NULL THEN 0 ELSE 1 END AS PRIMARY_KEY, CASE WHEN CCU.COLUMN_NAME IS NULL THEN 0 ELSE 1 END AS UNIQUE_KEY, 0 AS FK_KEY  from INFORMATION_SCHEMA.columns  COL left join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CCU ON  COL.COLUMN_NAME = CCU.COLUMN_NAME WHERE COL.TABLE_NAME = '$table$'
detailsColumnSeletivity_sqlserver=/*TAP*/ SELECT COUNT(DISTINCT $column$) as qtd FROM $table$
detailsColumnSeletivity_oracle=/*TAP*/ SELECT COUNT(DISTINCT $column$) as qtd FROM $table$


#********** PersistTuningActionsBehaviour **********#
workloadIsSave_postgresql=/*TAP*/ select wld_id from agent.tb_workload where wld_id = ?
workloadIsSave_oracle=/*TAP*/ select wld_id from tb_workload where wld_id = ?
workloadIsSave_sqlserver=/*TAP*/ select wld_id from tb_workload where wld_id = ?

insertSQLTbWorkload_postgresql=/*TAP*/ INSERT INTO agent.tb_workload(wld_id, wld_sql, wld_type, wld_valid, wld_timestamp, wld_last_cost) VALUES (?, ?, ?, ?, now(), ?)
insertSQLTbWorkload_oracle=/*TAP*/ INSERT INTO tb_workload(wld_id, wld_sql, wld_type, wld_valid, wld_timestamp, wld_last_cost) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, ?)
insertSQLTbWorkload_sqlserver=/*TAP*/ INSERT INTO tb_workload(wld_id, wld_sql, wld_type, wld_valid, wld_timestamp, wld_last_cost) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, ?)

updateSQLTbWorkload_postgresql=/*TAP*/ update agent.tb_workload set wld_last_cost = ? where wld_id = ?
updateSQLTbWorkload_sqlserver=/*TAP*/ update tb_workload set wld_last_cost = ? where wld_id = ?
updateSQLTbWorkload_oracle=/*TAP*/ update tb_workload set wld_last_cost = ? where wld_id = ?

SQLExecutionIsSave_postgresql=/*TAP*/ select wld_id from agent.tb_execution where wld_id = ? and exe_date = ?
SQLExecutionIsSave_oracle=/*TAP*/ select wld_id from tb_execution where wld_id = ? and exe_date = ?
SQLExecutionIsSave_sqlserver=/*TAP*/ select wld_id from tb_execution where wld_id = ? and exe_date = CAST(? AS DATETIME)

insertTbExecution_postgresql=/*TAP*/ INSERT INTO agent.tb_execution(wld_id, exe_date) VALUES (?, ?)
insertTbExecution_oracle=/*TAP*/ INSERT INTO tb_execution(wld_id, exe_date) VALUES (?, ?)
insertTbExecution_sqlserver=/*TAP*/ INSERT INTO tb_execution(wld_id, exe_date) VALUES (?, ?)

insertTbOperation_postgresql=/*TAP*/ INSERT INTO agent.tb_operation(wld_id, exe_date, ope_order, ope_name) VALUES (?, ?, ?, ?)
insertTbOperation_oracle=/*TAP*/ INSERT INTO tb_operation(wld_id, exe_date, ope_order, ope_name) VALUES (?, ?, ?, ?)
insertTbOperation_sqlserver=/*TAP*/ INSERT INTO tb_operation(wld_id, exe_date, ope_order, ope_name) VALUES (?, ?, ?, ?)

insertTbOperationData_postgresql=/*TAP*/ INSERT INTO agent.tb_operation_data(wld_id, exe_date, ope_order, opd_name, opd_data) VALUES (?, ?, ?, ?, ?)
insertTbOperationData_oracle=/*TAP*/ INSERT INTO tb_operation_data(wld_id, exe_date, ope_order, opd_name, opd_data) VALUES (?, ?, ?, ?, ?)
insertTbOperationData_sqlserver=/*TAP*/ INSERT INTO tb_operation_data(wld_id, exe_date, ope_order, opd_name, opd_data) VALUES (?, ?, ?, ?, ?)

propertiesPlanForSave_postgresql=
propertiesPlanForSave_oracle=cost;num_row;size_row;duration;object_name;filter_predicates;io_cost;cpu_cost;cardinality;bytes
propertiesPlanForSave_sqlserver=all

#********** ReadWorkloadBehaviour **********#
readWorkload_IndexCreate_oracle=/*TAP*/ select * from tb_workload where wld_valid = 1
readWorkload_DefineView_oracle=/*TAP*/ select * from tb_workload where wld_valid = 1

readWorkload_IndexCreate_sqlserver=/*TAP*/ select * from tb_workload where wld_valid = 1
readWorkload_DefineView_sqlserver=/*TAP*/ select * from tb_workload where wld_valid = 1
readWorkload_PartialIndexCreate_sqlserver=/*TAP*/ select * from tb_workload where wld_valid = 1

readWorkload_DefineView_postgresql=/*TAP*/ select * from agent.tb_workload where wld_valid = true
readWorkload_IndexCreate_postgresql=/*TAP*/ select * from agent.tb_workload where wld_valid = true
readWorkload_PartialIndexCreate_postgresql=/*TAP*/ select * from agent.tb_workload where wld_valid = true


readExecution_postgresql=/*TAP*/ SELECT * FROM agent.tb_execution where wld_id = ?
readExecution_oracle=/*TAP*/ SELECT * FROM tb_execution where wld_id = ?
readExecution_sqlserver=/*TAP*/ SELECT * FROM tb_execution where wld_id = ?

readOperation_oracle=/*TAP*/ select * from tb_operation where wld_id = ? and exe_date = ?
readOperation_sqlserver=/*TAP*/ select * from tb_operation where wld_id = ? and exe_date = CAST(? AS DATETIME)
readOperation_postgresql=/*TAP*/ select * from agent.tb_operation where wld_id = ? and exe_date = ?

readOperationData_oracle=/*TAP*/ select * from tb_operation_data where wld_id = ? and exe_date = ? and ope_order = ?
readOperationData_sqlserver=/*TAP*/ select * from tb_operation_data where wld_id = ? and exe_date = CAST(? AS DATETIME) and ope_order = ?
readOperationData_postgresql=/*TAP*/ select * from agent.tb_operation_data where wld_id = ? and exe_date = ? and ope_order = ?

readTuninActionSQLList_postgresql=/*TAP*/ select * from agent.tb_execution inner join agent.tb_workload on agent.tb_execution.wld_id = agent.tb_workload.wld_id inner join agent.tb_workload_tna on agent.tb_workload.wld_id = agent.tb_workload_tna.wld_id where agent.tb_workload_tna.tna_id = ? order by agent.tb_workload.wld_id
readTuninActionSQLList_oracle=/*TAP*/ select * from tb_execution inner join tb_workload on tb_execution.wld_id = tb_workload.wld_id inner join tb_workload_tna on tb_workload.wld_id = tb_workload_tna.wld_id where tb_workload_tna.tna_id = ? order by tb_workload.wld_id
readTuninActionSQLList_sqlserver=/*TAP*/ select * from tb_execution inner join tb_workload on tb_execution.wld_id = tb_workload.wld_id inner join tb_workload_tna on tb_workload.wld_id = tb_workload_tna.wld_id where tb_workload_tna.tna_id = ? order by tb_workload.wld_id

readTuninActionAgentList_postgresql=/*TAP*/ select agt_agent from agent.tb_agent_tna where tna_id = ?
readTuninActionAgentList_sqlserver=/*TAP*/ select agt_agent from tb_agent_tna where tna_id = ?
readTuninActionAgentList_oracle=/*TAP*/ select agt_agent from tb_agent_tna where tna_id = ?


#********** GenerateTuningActionsBehaviour **********#
updateTbTuningActionBenefitHeuristic_postgresql=/*TAP*/ UPDATE agent.tb_tuning_action SET tna_status='M' WHERE tna_profit > tna_cost and tna_status = 'H'
updateTbTuningActionBenefitHeuristic_oracle=/*TAP*/ UPDATE tb_tuning_action SET tna_status='M' WHERE tna_profit > tna_cost and tna_status = 'H'
updateTbTuningActionBenefitHeuristic_sqlserver=/*TAP*/ UPDATE tb_tuning_action SET tna_status='M' WHERE tna_profit > tna_cost and tna_status = 'H'

DDLCreateMV_postgresql=/*TAP*/ create materialized view $nameMV$ as $sqlMV$;
DDLCreateMV_oracle=/*TAP*/ CREATE MATERIALIZED VIEW $nameMV$ ENABLE QUERY REWRITE AS $sqlMV$
DDLCreateMV_sqlserver=/*TAP*/ CREATE VIEW $nameMV$ WITH SCHEMABINDING AS $sqlMV$

DDLCreatePartialIndex=CREATE INDEX $nameIndex$ ON $nameTable$ ($columnIndex$) WHERE $restrictionFilter$;

captureEstimatedPlanPartialIndex_sqlserver=/*TAP*/ select $columnIndex$ from $nameTable$ where $restrictionFilter$
captureEstimatedPlanPartialIndex_postgresql=/*TAP*/ select $columnIndex$ from $nameTable$ where $restrictionFilter$
captureEstimatedPlanPartialIndex_oracle=/*TAP*/ select $columnIndex$ from $nameTable$ where $restrictionFilter$

DDLUpdateMV_sqlserver=/*TAP*/ UPDATE STATISTICS dbo.$viewname$;

tuningActionAgentIsSave_postgresql=/*TAP*/ select tna_id from agent.tb_agent_tna where tna_id = ? and agt_agent = ?
tuningActionAgentIsSave_sqlserver=/*TAP*/ select tna_id from tb_agent_tna where tna_id = ? and agt_agent = ?
tuningActionAgentIsSave_oracle=/*TAP*/ select tna_id from tb_agent_tna where tna_id = ? and agt_agent = ?

tuningActionIsSave_postgresql=/*TAP*/ select tna_id from agent.tb_tuning_action where tna_id = ?
tuningActionIsSave_oracle=/*TAP*/ select tna_id from tb_tuning_action where tna_id = ?
tuningActionIsSave_sqlserver=/*TAP*/ select tna_id from tb_tuning_action where tna_id = ?

globalTuningIsSave_postgresql=/*TAP*/ select tna_id from agent.tb_candidate_global_tuning where tna_id = ? and tna_parent_id = ?
globalTuningIsSave_sqlserver=/*TAP*/ select tna_id from tb_candidate_global_tuning where tna_id = ? and tna_parent_id = ?
globalTuningIsSave_oracle=/*TAP*/ select tna_id from tb_candidate_global_tuning where tna_id = ? and tna_parent_id = ?

workloadTNAIsSave_postgresql=/*TAP*/ select tna_id from agent.tb_workload_tna where tna_id = ? and wld_id = ?
workloadTNAIsSave_oracle=/*TAP*/ select tna_id from tb_workload_tna where tna_id = ? and wld_id = ?
workloadTNAIsSave_sqlserver=/*TAP*/ select tna_id from tb_workload_tna where tna_id = ? and wld_id = ?

updateTuningActionStatus_postgresql=/*TAP*/ UPDATE agent.tb_tuning_action SET tna_status=? WHERE tna_id = ? and tna_status <> 'R'
updateTuningActionStatus_oracle=/*TAP*/ UPDATE tb_tuning_action SET tna_status=? WHERE tna_id = ? and tna_status <> 'R'
updateTuningActionStatus_sqlserver=/*TAP*/ UPDATE tb_tuning_action SET tna_status=? WHERE tna_id = ? and tna_status <> 'R'

insertTbTuningActionAgent_postgresql=/*TAP*/ INSERT INTO agent.tb_agent_tna(agt_agent, tna_id) VALUES (?, ?);
insertTbTuningActionAgent_oracle=/*TAP*/ INSERT INTO tb_agent_tna(agt_agent, tna_id) VALUES (?, ?)
insertTbTuningActionAgent_sqlserver=/*TAP*/ INSERT INTO tb_agent_tna(agt_agent, tna_id) VALUES (?, ?);

insertTbTuningAction_postgresql=/*TAP*/ INSERT INTO agent.tb_tuning_action(tna_id, tna_ddl, tna_cost, tna_profit, tna_status, tna_selectivity, tna_ddl_execute) VALUES (?, ?, ?, ?, ?, ?, ?)
insertTbTuningAction_oracle=    /*TAP*/ INSERT INTO tb_tuning_action(tna_id, tna_ddl, tna_cost, tna_profit, tna_status, tna_selectivity, tna_ddl_execute) VALUES (?, ?, ?, ?, ?, ?, ?)
insertTbTuningAction_sqlserver=/*TAP*/ INSERT INTO tb_tuning_action(tna_id, tna_ddl, tna_cost, tna_profit, tna_status, tna_selectivity, tna_ddl_execute) VALUES (?, ?, ?, ?, ?, ?, ?)

updateTbTuningAction_postgresql=/*TAP*/ UPDATE agent.tb_tuning_action SET tna_ddl=?, tna_cost=?, tna_profit=? WHERE tna_id = ?
updateTbTuningAction_oracle=/*TAP*/ UPDATE tb_tuning_action SET tna_ddl=?, tna_cost=?, tna_profit=? WHERE tna_id = ?
updateTbTuningAction_sqlserver=/*TAP*/ UPDATE tb_tuning_action SET tna_ddl=?, tna_cost=?, tna_profit=? WHERE tna_id = ?

inserTbWorkloadTNA_postgresql=/*TAP*/ INSERT INTO agent.tb_workload_tna(wld_id, tna_id) VALUES (?, ?)
inserTbWorkloadTNA_oracle=/*TAP*/ INSERT INTO tb_workload_tna(wld_id, tna_id) VALUES (?, ?)
inserTbWorkloadTNA_sqlserver=/*TAP*/ INSERT INTO tb_workload_tna(wld_id, tna_id) VALUES (?, ?)

inserTbCandidateGlobalTuning_postgresql=/*TAP*/ INSERT INTO agent.tb_candidate_global_tuning(tna_id, tna_parent_id) VALUES (?, ?)
inserTbCandidateGlobalTuning_sqlserver=/*TAP*/ INSERT INTO tb_candidate_global_tuning(tna_id, tna_parent_id) VALUES (?, ?)
inserTbCandidateGlobalTuning_oracle=/*TAP*/ INSERT INTO tb_candidate_global_tuning(tna_id, tna_parent_id) VALUES (?, ?)


MaterializedView_IsSave_postgresql=/*TAP*/ select tna_id from agent.tb_candidate_mv where tna_id = ?
MaterializedView_IsSave_oracle=/*TAP*/ select tna_id from tb_candidate_mv where tna_id = ?
MaterializedView_IsSave_sqlserver=/*TAP*/ select tna_id from tb_candidate_mv where tna_id = ?

Index_IsSave_postgresql=/*TAP*/ select tna_id from agent.tb_candidate_index where tna_id = ?
Index_IsSave_oracle=/*TAP*/ select tna_id from tb_candidate_index where tna_id = ?
Index_IsSave_sqlserver=/*TAP*/ select tna_id from tb_candidate_index where tna_id = ?

PartialIndex_IsSave_postgresql=/*TAP*/ select tna_id from agent.tb_candidate_partial_index where tna_id = ?
PartialIndex_IsSave_sqlserver=/*TAP*/ select tna_id from tb_candidate_partial_index where tna_id = ?
PartialIndex_IsSave_oracle=/*TAP*/ select tna_id from tb_candidate_partial_index where tna_id = ?

queryCountUsingIndex_postgresql=/*TAP*/ select count(wtna.tna_id) * count(exe.wld_id) as queryCount from agent.tb_workload_tna wtna inner join agent.tb_candidate_index cid on wtna.tna_id = cid.tna_id inner join agent.tb_execution exe on wtna.wld_id = exe.wld_id where wtna.tna_id = ?
queryCountUsingIndex_oracle=/*TAP*/ select count(wtna.tna_id * exe.wld_id) as queryCount from tb_workload_tna wtna inner join tb_candidate_index cid on wtna.tna_id = cid.tna_id inner join tb_execution exe on wtna.wld_id = exe.wld_id where wtna.tna_id = ?
queryCountUsingIndex_sqlserver=/*TAP*/ select count(wtna.tna_id * exe.wld_id) as queryCount from tb_workload_tna wtna inner join tb_candidate_index cid on wtna.tna_id = cid.tna_id inner join tb_execution exe on wtna.wld_id = exe.wld_id where wtna.tna_id = ?

queryCountUsingPartialIndex_sqlserver=/*TAP*/ select count(wtna.tna_id * exe.wld_id) as queryCount from tb_workload_tna wtna inner join tb_candidate_partial_index cid on wtna.tna_id = cid.tna_id inner join tb_execution exe on wtna.wld_id = exe.wld_id where wtna.tna_id = ?
queryCountUsingPartialIndex_postgresql=/*TAP*/ select (count(wtna.tna_id) * count(exe.wld_id)) as queryCount from agent.tb_workload_tna wtna inner join agent.tb_candidate_partial_index cid on wtna.tna_id = cid.tna_id inner join agent.tb_execution exe on wtna.wld_id = exe.wld_id where wtna.tna_id = ?

insertCandidateIndex_postgresql=/*TAP*/ INSERT INTO agent.tb_candidate_index(tna_id, cid_table_name, cid_type, cid_initial_profit, cid_fragmentation_level, cid_initial_ratio, cid_index_name, cid_creation_time) VALUES (?, ?, ?, ?, ?, ?, ?, null)
insertCandidateIndex_oracle=/*TAP*/ INSERT INTO tb_candidate_index(tna_id, cid_table_name, cid_type, cid_initial_profit, cid_fragmentation_level, cid_initial_ratio, cid_index_name, cid_creation_time) VALUES (?, ?, ?, ?, ?, ?, ?, null)
insertCandidateIndex_sqlserver=/*TAP*/ INSERT INTO tb_candidate_index(tna_id, cid_table_name, cid_type, cid_initial_profit, cid_fragmentation_level, cid_initial_ratio, cid_index_name, cid_creation_time) VALUES (?, ?, ?, ?, ?, ?, ?, null)

insertCandidateIndexColumn_postgresql=/*TAP*/ INSERT INTO agent.tb_candidate_index_column(tna_id, cic_column_name, cic_type) VALUES (?, ?, ?)
insertCandidateIndexColumn_oracle=/*TAP*/ INSERT INTO tb_candidate_index_column(tna_id, cic_column_name, cic_type) VALUES (?, ?, ?)
insertCandidateIndexColumn_sqlserver=/*TAP*/ INSERT INTO tb_candidate_index_column(tna_id, cic_column_name, cic_type) VALUES (?, ?, ?)

selectCandidateIndexColumn_postgresql=/*TAP*/ select * from agent.tb_candidate_index_column where tna_id = ?
selectCandidateIndexColumn_oracle=/*TAP*/ select * from tb_candidate_index_column where tna_id = ?
selectCandidateIndexColumn_sqlserver=/*TAP*/ select * from tb_candidate_index_column where tna_id = ?

inserTbCandidateMV_postgresql=/*TAP*/ INSERT INTO agent.tb_candidate_mv(tna_id) VALUES (?)
inserTbCandidateMV_oracle=/*TAP*/ INSERT INTO tb_candidate_mv(tna_id) VALUES (?)
inserTbCandidateMV_sqlserver=/*TAP*/ INSERT INTO tb_candidate_mv(tna_id) VALUES (?)

insertCandidatePartialIndex_sqlserver=/*TAP*/ INSERT INTO tb_candidate_partial_index(tna_id) VALUES (?)
insertCandidatePartialIndex_postgresql=/*TAP*/ INSERT INTO agent.tb_candidate_partial_index(tna_id) VALUES (?)
insertCandidatePartialIndex_oracle=/*TAP*/ INSERT INTO tb_candidate_partial_index(tna_id) VALUES (?)

#********** ExecuteTuningActionsBehaviour **********#
readToExecuteMV_postgresql=/*TAP*/ select * from agent.tb_tuning_action tna inner join agent.tb_candidate_mv cmv on cmv.tna_id = tna.tna_id  where tna_status = 'M'
readToExecuteMV_oracle=/*TAP*/ select * from tb_tuning_action tna inner join tb_candidate_mv cmv on cmv.tna_id = tna.tna_id  where tna_status = 'M'
readToExecuteMV_sqlserver=/*TAP*/ select * from tb_tuning_action tna inner join tb_candidate_mv cmv on cmv.tna_id = tna.tna_id  where tna_status = 'M'

readToExecuteIndex_postgresql=/*TAP*/ select * from agent.tb_tuning_action tna inner join agent.tb_candidate_index cid on cid.tna_id = tna.tna_id  where tna_status = 'M'
readToExecuteIndex_oracle=/*TAP*/ select * from tb_tuning_action tna inner join tb_candidate_index cid on cid.tna_id = tna.tna_id  where tna_status = 'M'
readToExecuteIndex_sqlserver=/*TAP*/ select * from tb_tuning_action tna inner join tb_candidate_index cid on cid.tna_id = tna.tna_id  where tna_status = 'M'

readToExecutePartialIndex_sqlserver=/*TAP*/ select * from tb_tuning_action tna inner join tb_candidate_partial_index cid on cid.tna_id = tna.tna_id  where tna_status = 'M'
readToExecutePartialIndex_oracle=/*TAP*/ select * from tb_tuning_action tna inner join tb_candidate_partial_index cid on cid.tna_id = tna.tna_id  where tna_status = 'M'
readToExecutePartialIndex_postgresql=/*TAP*/ select * from tb_tuning_action tna inner join tb_candidate_partial_index cid on cid.tna_id = tna.tna_id  where tna_status = 'M'

checkStatusTuningAction_postgresql=/*TAP*/ select tna_status from agent.tb_tuning_action where tna_id = ?
checkStatusTuningAction_oracle=/*TAP*/ select tna_status from tb_tuning_action where tna_id = ?
checkStatusTuningAction_sqlserver=/*TAP*/ select tna_status from tb_tuning_action where tna_id = ?

querySelectionHeuristicPartialIndex_postgresql=select * from agent.tb_tuning_action where tna_selectivity > ?
querySelectionHeuristicPartialIndex_oracle=select * from agent.tb_tuning_action where tna_selectivity > ?

getSelectivityPartialIndex_postgresql=select distinct(($columns$)) as number_rows from $table$ WHERE $conditions$
getSelectivityIndex_postgresql=select count(distinct($column$)) as n_distinct from $table$
getSelectivityIndex_sqlserver=select count(distinct($column$)) as n_distinct from $table$
getSelectivityIndex_oracle=select count(distinct($column$)) as n_distinct from $table$

getSqlCleanPlanExecutionForOracle=delete from plan_table
getSqlGeneratePlanExecutionForOracle=EXPLAIN PLAN FOR $QUERY$
getSqlUpdatePlanExecutionForOracle= update plan_table set time = (SELECT max(elapsed_time/executions) FROM v$sql s, v$sql_plan sp WHERE s.sql_id = sp.sql_id and  sql_text like '$QUERY$') where time is null
getSqlExtractPlanExecutionForOracle=select * from plan_table order by timestamp desc